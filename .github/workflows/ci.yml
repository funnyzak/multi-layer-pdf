name: CI

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - '*'
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
        poetry-version: ['1.2.1']
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Install Project Dependencies
        run: |
          poetry install --sync --all-extras --with dev
      - name: Lint with black
        run: |
          poetry run black ./src --check
      - name: Lint with mypy
        run: |
          poetry run mypy ./src
      - name: Lint with flake8
        run: |
          poetry run flake8 ./src
      - name: Lint with isort
        run: |
          poetry run isort ./src --check
      - name: Check poetry lock file
        run: |
          poetry lock --check
  run-project:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.7']
        poetry-version: ['1.2.1']
        os: [ubuntu-latest]
    needs: lint-and-test
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Install Project Dependencies
        run: |
          poetry install
      - name: Run Hello World
        run: |
          poetry run hello

  release:
    env:
      DIST_ARCHIVE_NAME: ${{ github.event.repository.name }}-dist
    runs-on: ${{ matrix.os }}
    needs: [lint-and-test]
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        python-version: ['3.7']
        poetry-version: ['1.2.1']
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
    - name: build changelog
      id: build_changelog
      uses: mikepenz/release-changelog-builder-action@v2.9.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        configuration: "config/changelog_configuration.json"
        ignorePreReleases: "false"
    - name: Archive Release
      uses: papeloto/action-zip@v1
      with:
        files: ./
        recursive: false
        dest: ${{ env.DIST_ARCHIVE_NAME }}-${{ steps.get_version.outputs.VERSION }}.zip
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body: ${{steps.build_changelog.outputs.changelog}}
        files:  |
          ${{ env.DIST_ARCHIVE_NAME }}-${{ steps.get_version.outputs.VERSION }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.github_token }}

  push:
    runs-on: ubuntu-latest
    needs: [run-project]
    steps:
      - name: Push message
        uses: funnyzak/pushoo-action@main
        with:
          platforms: ifttt, bark
          tokens: ${{ secrets.PUSH_TOKEN }}
          content: |
            # ${{github.repository}} Released
          options: '{"bark": { "url": "https://github.com/funnyzak" }}'
          debug: false
